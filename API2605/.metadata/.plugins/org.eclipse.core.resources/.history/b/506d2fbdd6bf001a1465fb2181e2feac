package view;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.imageio.ImageIO;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.websocket.Session;

import org.json.JSONArray;
import org.json.JSONObject;

import control.AgendaDAO;
import control.CaixaEntradaDAO;
import control.EmpresasDAO;
import control.ItemDAO;
import control.MensagemDAO;
import control.PedidosDAO;
import control.ProdutosDAO;
import control.SocioDAO;
import model.Agenda;
import model.CaixaEntrada;
import model.ConnectionSocket;
import model.Empresa;
import model.Item;
import model.Mensagem;
import model.Pedidos;
import model.Produtos;
import model.Socio;

@WebServlet("/Servlet")
public class Servlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	private Empresa emp = new Empresa();
	private Mensagem msg= new Mensagem();
	private Socio soc = new Socio();
	private Produtos prod = new Produtos();
	private Pedidos ped = new Pedidos();
	private Item it = new Item();
	private Agenda agd = new Agenda();
	private CaixaEntrada ce = new CaixaEntrada();

	private EmpresasDAO empDAO = new EmpresasDAO();;
	private MensagemDAO msgDAO = new MensagemDAO();
	private SocioDAO socDAO = new SocioDAO();
	private ProdutosDAO prodDAO = new ProdutosDAO();
	private AgendaDAO agdDAO = new AgendaDAO();
	private PedidosDAO pedDAO = new PedidosDAO();
	private ItemDAO itDAO = new ItemDAO();
	private CaixaEntradaDAO ceDAO = new CaixaEntradaDAO();

	private String valores;

	private JSONObject obj, ob;
	private JSONArray arr;
	
	private ConnectionSocket cs = new ConnectionSocket();

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		int acao = Integer.parseInt(req.getParameter("acao"));
		valores = req.getParameter("valores");

		PrintWriter out = resp.getWriter();
		
		obj = new JSONObject();;
		switch (acao) {
		// CADASTRA EMPRESA
		case 1:
			ob = new JSONObject(valores);
			System.out.println(ob.toString());
			if (ob.has("cnpj") && ob.has("endereco") && ob.has("empresa") && ob.has("senha") && ob.has("telefone")
					&& ob.has("tipo")) {
				
				emp.setCnpj(ob.getString("cnpj"));
				emp.setEndereco(ob.getString("endereco"));
				emp.setNomeEmpresa(ob.getString("empresa"));
				emp.setSenha(ob.getString("senha"));
				emp.setTelefone(ob.getString("telefone"));
				emp.setTipo(ob.getString("tipo"));
				
				if(ob.has("descricao")) 
					emp.setDescricao(ob.getString("descricao"));
				else 
					emp.setDescricao(null);
				
				if(ob.has("foto_perfil")) {
					emp.setFotoPerfil(emp.parseImage(ob.getString("foto_perfil")));
				}else
					emp.setFotoPerfil(null);

				try {
					if (empDAO.create(emp)) {
						obj.put("cod", 101);
						out.write(obj.toString());
					} else {
						obj.put("cod", 102);
						out.write(obj.toString());
					}
				} catch (SQLException e) {
					e.printStackTrace();
					obj.put("cod", 103);
					out.write(obj.toString());
				}
			} else {
				obj.put("cod", 100);
				out.write(obj.toString());
			}
			break;

		// ENVIA MENSAGEM
		case 2:
			ob = new JSONObject(valores);
			if (ob.has("cnpj_dest") && ob.has("cnpj_origem") && ob.has("msg")) {
				msg.setCnpjDest(ob.getString("cnpj_dest"));
				msg.setCnpjOrigem(ob.getString("cnpj_origem"));
				msg.setMensagem(ob.getString("msg"));

				try {
					if(msgDAO.read(ob.getString("cnpj_dest"),ob.getString("cnpj_origem")) == null) {
						ce.setCnpjDest(ob.getString("cnpj_dest"));
						ce.setCnpjOrigem(ob.getString("cnpj_origem"));
					
						String empresa = empDAO.read(ob.getString("cnpj_origem")).getNomeEmpresa();
					
						ce.setMensagem("A empresa "+empresa+" iniciou uma nova conversa com você. Vá para as suas conversas.");
						ce.setDestino(false);
						Session s = cs.socket();
						JSONObject js = new JSONObject();
						js.put("action", "caixa_entrada");
						js.put("title", "MENSAGEM");
						js.put("userFrom", ce.getCnpjDest());
						js.put("href", "caixaentrada.jsp");
						js.put("message","A empresa "+empresa+" iniciou uma nova conversa com você. Vá para as suas conversas.");
						s.getBasicRemote().sendText(js.toString());
						ceDAO.create(ce);
					}
					if (msgDAO.create(msg)) {
						obj.put("cod", 101);
						Session s = cs.socket();
						JSONObject js = new JSONObject();
						js.put("action", "submit_message");
						js.put("title", "MENSAGEM");
						js.put("userFrom", ce.getCnpjDest());
						js.put("href", "mensagem.jsp");
						js.put("message", ob.getString("msg"));
						s.getBasicRemote().sendText(js.toString());
						out.write(obj.toString());
						
					} else {
						obj.put("cod", 102);
						out.write(obj.toString());
					}
				} catch (SQLException e) {
					obj.put("cod", 103);
					out.write(obj.toString());
				}
			} else {
				obj.put("cod", valores);
				out.write(obj.toString());
			}

			break;

		// LISTA MENSAGENS
		case 3:
			ob = new JSONObject(valores);

			if (ob.has("cnpj_dest") && ob.has("cnpj_origem")) {
				msg.setCnpjDest(ob.getString("cnpj_dest"));
				msg.setCnpjOrigem(ob.getString("cnpj_origem"));
				
				try {

					List<Mensagem> nLidas =  msgDAO.readQntFalse(msg.getCnpjOrigem(),msg.getCnpjDest());
					JSONArray array = new JSONArray();
					ob = new JSONObject();
					for (Mensagem mensagem : nLidas) {
						JSONObject objt = new JSONObject();
						objt.put("id", mensagem.getIdMensagem());
						System.out.println(array.toString());
						objt.put("cnpj_origem", mensagem.getCnpjOrigem());
						objt.put("horario", mensagem.parseTime(mensagem.getHorarioPostagem()));
						objt.put("data", mensagem.parseDate(mensagem.getDataPostagem()));
						objt.put("message", mensagem.getMensagem());
						objt.put("status", mensagem.getStatus());
						array.put(objt);
					}
					ob.put("nao_lidas", array);
					
					List<Date> lData = msgDAO.list(msg.getCnpjOrigem(), msg.getCnpjDest());
					arr = new JSONArray();
					for (Date data : lData) {
						JSONObject objts = new JSONObject();
						array = new JSONArray();
						List<Mensagem> lMsg = msgDAO.list(msg.getCnpjOrigem(), msg.getCnpjDest(), String.valueOf(msg.parseUtilSQL(data)));
						System.out.println(lMsg.size());

						for (Mensagem mensagem : lMsg) {
							JSONObject objt = new JSONObject();
							System.out.println("ID: "+mensagem.getIdMensagem());
							objt.put("id", mensagem.getIdMensagem());
							objt.put("cnpj_origem", mensagem.getCnpjOrigem());
							objt.put("horario", mensagem.parseTime(mensagem.getHorarioPostagem()));
							objt.put("data", mensagem.parseDate(mensagem.getDataPostagem()));
							objt.put("message", mensagem.getMensagem());
							objt.put("status", mensagem.getStatus());
							array.put(objt);
						}
						objts.put("log", array);
						objts.put("dia", msg.parseDate(data));
						
						arr.put(objts);
					}
					ob.put("lidas", arr);
					out.write(ob.toString());
				} catch (SQLException e) {
					e.printStackTrace();
					obj.put("cod", 103);
					out.write(obj.toString());
				}
			} else {
				obj.put("cod", 100);
				out.write(obj.toString());
			}

			break;

		// LISTA SOCIOS
		case 4:
			ob = new JSONObject(valores);

			if (ob.has("cnpj_origem")) {
				soc.setCnpjOrigem(ob.getString("cnpj_origem"));

				try {
					List<Socio> lMsg = socDAO.list(soc.getCnpjOrigem());
					arr = new JSONArray();
					for (Socio socio : lMsg) {
						ob = new JSONObject();
						ob.put("cnpj_origem", socio.getCnpjOrigem());
						ob.put("cnpj_dest", socio.getCnpjDest());
						ob.put("data", socio.getDataContratacao());
						arr.put(ob);
					}
					out.write(arr.toString());
				} catch (SQLException e) {
					obj.put("cod", 103);
					out.write(obj.toString());
				}
			} else {
				obj.put("cod", 100);
				out.write(obj.toString());
			}
			break;

		// BUSCA EMPRESA POR CNPJ
		case 5:
			ob = new JSONObject(valores);

			if (ob.has("cnpj")) {
				emp.setCnpj(ob.getString("cnpj"));

				try {
					Empresa empresa = empDAO.read(emp.getCnpj());
					ob = new JSONObject();
					ob.put("cnpj", empresa.getCnpj());
					ob.put("empresa", empresa.getNomeEmpresa());
					ob.put("endereco", empresa.getEndereco());
					ob.put("telefone", empresa.getTelefone());
					ob.put("descricao", empresa.getDescricao());
					ob.put("tipo", empresa.getTipo());
					
					out.write(ob.toString());
				} catch (SQLException e) {
					obj.put("cod", 103);
					out.write(obj.toString());
				}
			} else {
				obj.put("cod", 100);
				out.write(obj.toString());
			}

			break;

		// LISTA SOLICITACOES
		case 6:
			ob = new JSONObject(valores);

			if (ob.has("cnpj_origem")) {
				soc.setCnpjOrigem(ob.getString("cnpj_origem"));

				try {
					List<Socio> lSoc = socDAO.listSoliD(soc.getCnpjOrigem());
					arr = new JSONArray();
					for (Socio socio : lSoc) {
						ob = new JSONObject();
						ob.put("cnpj_origem", socio.getCnpjOrigem());
						ob.put("cnpj_dest", socio.getCnpjDest());
						ob.put("data", socio.getDataContratacao());
						arr.put(ob);
					}
					out.write(arr.toString());

				} catch (SQLException e) {
					
					obj.put("cod", 103);
					out.write(obj.toString());
				}
			} else {
				obj.put("cod", 100);
				out.write(obj.toString());
			}

			break;

		// RECUSA OU CANCELA SOLICITACAO
		case 7:
			ob = new JSONObject(valores);

			if (ob.has("cnpj_dest") && ob.has("cnpj_origem")) {
				soc.setCnpjOrigem(ob.getString("cnpj_origem"));
				soc.setCnpjDest(ob.getString("cnpj_dest"));
				
				try {
					Socio socio = socDAO.read(ob.getString("cnpj_origem"), ob.getString("cnpj_dest"));
					if (socDAO.delete(soc.getCnpjOrigem(), soc.getCnpjDest())) {
						obj.put("cod", 101);
						out.write(obj.toString());
						
						ce.setCnpjDest(ob.getString("cnpj_dest"));
						ce.setCnpjOrigem(ob.getString("cnpj_origem"));
						
						String empresa = empDAO.read(ob.getString("cnpj_origem")).getNomeEmpresa();
						
						Session s = cs.socket();
						JSONObject js = new JSONObject();
						js.put("action", "caixa_entrada");
						js.put("title", "SOLICITAÇÃO");
						js.put("userFrom", ce.getCnpjDest());
						js.put("href", "solicitacao.jsp");
						
						if(socio.getDataContratacao() != null) {
							ce.setMensagem("A empresa "+empresa+" quebrou o quebrou o vinculo que havia com a sua empresa");
							ce.setDestino(true);
						} else if(socio.getCnpjDest().equals(ob.getString("cnpj_origem"))) {
							ce.setMensagem("A empresa "+empresa+" recusou a sua proposta de contrato.");
							ce.setDestino(false);
						}
						js.put("message", ce.getMensagem());
						s.getBasicRemote().sendText(js.toString());
						ceDAO.create(ce);
					} else {
						obj.put("cod", 102);
						out.write(obj.toString());
					}

				} catch (SQLException e) {
					obj.put("cod", 103);
					out.write(obj.toString());
				}
			} else {
				obj.put("cod", 100);
				out.write(obj.toString());
			}
			break;

		// ACEITA SOLICITACAO
		case 8:
			ob = new JSONObject(valores);

			if (ob.has("cnpj_dest") || ob.has("cnpj_origem")) {
				soc.setCnpjOrigem(ob.getString("cnpj_origem"));
				soc.setCnpjDest(ob.getString("cnpj_dest"));

				try {
					if (socDAO.update(soc.getCnpjOrigem(), soc.getCnpjDest())) {
						obj.put("cod", 101);
						Session s = cs.socket();
						JSONObject js = new JSONObject();
						js.put("action", "caixa_entrada");
						js.put("title", "SOLICITAÇÃO");
						js.put("userFrom", ce.getCnpjDest());
						js.put("href", "caixaentrada.jsp");
						String empresa = empDAO.read(ob.getString("cnpj_origem")).getNomeEmpresa();
						js.put("message","A empresa "+empresa+" aceitou sua solicitação. Agora vocês são parceiros.");
						s.getBasicRemote().sendText(js.toString());
						out.write(obj.toString());
					} else {
						obj.put("cod", 102);
						out.write(obj.toString());
					}

				} catch (SQLException e) {
					obj.put("cod", 103);
					out.write(obj.toString());
				}
			} else {
				obj.put("cod", 100);
				out.write(obj.toString());
			}
			break;

		// LISTA EMPRESAS
		case 9:
			ob = new JSONObject(valores);
			
			List<Empresa> lEmp;
			try {
				System.out.println(ob.getInt("limit"));
				lEmp = empDAO.list(ob.getString("cnpj"), ob.getInt("limit"));
				arr = new JSONArray();
				for (Empresa empresa : lEmp) {
					ob = new JSONObject();
					ob.put("cnpj", empresa.getCnpj());
					ob.put("empresa", empresa.getNomeEmpresa());
					ob.put("telefone", empresa.getTelefone());
					ob.put("descricao", empresa.getDescricao());
					ob.put("senha", empresa.getSenha());
					ob.put("tipo", empresa.getTipo());
					arr.put(ob);
				}
				out.write(arr.toString());

			} catch (Exception e) {
				e.printStackTrace();
			}
			break;

		// ENVIAR SOLICITACAO
		case 10:
			ob = new JSONObject(valores);

			if (ob.has("cnpj_dest") && ob.has("cnpj_origem")) {
				
				soc.setCnpjOrigem(ob.getString("cnpj_origem"));
				soc.setCnpjDest(ob.getString("cnpj_dest"));

				try {
					if (socDAO.create(soc)) {
						obj.put("cod", 101);
						out.write(obj.toString());

						ce.setCnpjDest(ob.getString("cnpj_dest"));
						ce.setCnpjOrigem(ob.getString("cnpj_origem"));
						
						String empresa = empDAO.read(ob.getString("cnpj_origem")).getNomeEmpresa();
						ce.setMensagem("A empresa "+empresa+" deseja fechar uma nova parceria com você. Vá para as solicitações.");
						ce.setDestino(false);
						ceDAO.create(ce);

						Session s = cs.socket();
						JSONObject js = new JSONObject();
						js.put("action", "caixa_entrada");
						js.put("title", "SOLICITAÇÃO");
						js.put("userFrom", ce.getCnpjDest());
						js.put("href", "caixaentrada.jsp");
						js.put("message",ce.getMensagem());
						s.getBasicRemote().sendText(js.toString());
						
					} else {
						obj.put("cod", 102);
						out.write(obj.toString());
					}

				} catch (SQLException e) {
					
					obj.put("cod", 103);
					out.write(obj.toString());
				}
			} else {
				obj.put("cod", 100);
				out.write(obj.toString());
			}
			break;

		// UPDATE EMPRESAS
		case 11:
			System.out.println(valores);
			ob = new JSONObject(valores);
			if (ob.has("cnpj") && ob.has("endereco") && ob.has("empresa") && ob.has("telefone") && ob.has("tipo")) {

				emp.setCnpj(ob.getString("cnpj"));
				emp.setEndereco(ob.getString("endereco"));
				emp.setNomeEmpresa(ob.getString("empresa"));
				emp.setTelefone(ob.getString("telefone"));
				emp.setTipo(ob.getString("tipo"));
				emp.setDescricao(ob.getString("descricao"));
				try {
					if(ob.has("foto_perfil"))
						emp.setFotoPerfil(emp.parseImage(ob.getString("foto_perfil")));
					else if(empDAO.read(ob.getString("cnpj")).getFotoPerfil() != null)
						emp.setFotoPerfil(empDAO.read(ob.getString("cnpj")).getFotoPerfil());
					else
						emp.setFotoPerfil(null);
					
				} catch (SQLException e) {
					e.printStackTrace();
				}
				

				if(ob.has("descricao"))
					emp.setDescricao(ob.getString("descricao"));
				else
					emp.setDescricao(null);
				
				try {
					if (empDAO.update(emp)) {
						obj.put("cod", 101);
						out.write(obj.toString());
					} else {
						obj.put("cod", 102);
						out.write(obj.toString());
					}
				} catch (SQLException e) {
					
					obj.put("cod", 103);
					out.write(obj.toString());
				}
			} else {
				obj.put("cod", 100);
				out.write(obj.toString());
			}
			break;

		// BUSCA SOCIO
		case 12:
			ob = new JSONObject(valores);

			if (ob.has("cnpj_origem") && ob.has("cnpj_dest")) {
				soc.setCnpjOrigem(ob.getString("cnpj_origem"));
				soc.setCnpjDest(ob.getString("cnpj_dest"));

				try {
					Socio socio = socDAO.read(soc.getCnpjOrigem(), soc.getCnpjDest());
					ob = new JSONObject();
					if(socio != null) {
						ob.put("cnpj_origem", socio.getCnpjOrigem());
						ob.put("cnpj_dest", socio.getCnpjDest());
						ob.put("data", socio.getDataContratacao());
					} else {
						ob.put("cod",205);
					}
					out.write(ob.toString());

				} catch (SQLException e) {
					obj.put("cod", 103);
					out.write(obj.toString());
				}
			} else {
				obj.put("cod", 100);
				out.write(obj.toString());
			}
			break;

		// MARCA COMPROMISSO
		case 13:
			ob = new JSONObject(valores);

			if (ob.has("cnpj_origem") && ob.has("cnpj_dest") && ob.has("titulo") && ob.has("descricao")
					&& ob.has("data") && ob.has("horario")) {
				agd.setCnpjOrigem(ob.getString("cnpj_origem"));
				agd.setCnpjDest(ob.getString("cnpj_dest"));
				agd.setTitulo(ob.getString("titulo"));
				agd.setDescricao(ob.getString("descricao"));
				agd.setData(ob.getString("data"));
				agd.setHorario(ob.getString("horario"));

				try {
					if (agdDAO.create(agd)) {
						obj.put("cod", 101);
						ce.setCnpjDest(ob.getString("cnpj_dest"));
						ce.setCnpjOrigem(ob.getString("cnpj_origem"));
						
						String empresa = empDAO.read(ob.getString("cnpj_origem")).getNomeEmpresa();
						
						ce.setMensagem("A empresa "+empresa+" deseja marcar um evento com você. Vá para a sua genda.");
						ce.setDestino(false);
						ceDAO.create(ce);
						
						Session s = cs.socket();
						JSONObject js = new JSONObject();
						js.put("action", "caixa_entrada");
						js.put("title", "AGENDA");
						js.put("userFrom", ob.getString("cnpj_dest"));
						js.put("href", "caixaentrada.jsp");
						js.put("message",ce.getMensagem());
						s.getBasicRemote().sendText(js.toString());
					} else {
						obj.put("cod", 102);
					}

				} catch (SQLException e) {
					
					obj.put("cod", 103);
				}
			} else {
				obj.put("cod", 100);
			}
			out.write(obj.toString());
			break;

		// LISTA AGENDA
		case 14:
			ob = new JSONObject(valores);

			if (ob.has("cnpj_origem")) {
				agd.setCnpjOrigem(ob.getString("cnpj_origem"));

				arr = new JSONArray();
				try {
					for (Agenda agenda : agdDAO.list(agd.getCnpjOrigem())) {
						ob = new JSONObject();
						ob.put("id", agenda.getIdCompromisso());
						ob.put("cnpj_origem", agenda.getCnpjOrigem());
						ob.put("cnpj_dest", agenda.getCnpjDest());
						ob.put("data", agenda.getData());
						ob.put("titulo", agenda.getTitulo());
						ob.put("descricao", agenda.getDescricao());
						ob.put("horario", agenda.getHorario());
						ob.put("agendado", agenda.getAgendado());
						
						if (agenda.getCnpjDest().equals("cnpj_origem")) {
							emp = empDAO.read(agenda.getCnpjOrigem());
						} else {
							emp = empDAO.read(agenda.getCnpjDest());
						}
						
						ob.put("empresa", emp.getNomeEmpresa());
						arr.put(ob);
					}
					out.write(arr.toString());

				} catch (SQLException e) {
					
					obj.put("cod", 103);
					out.write(obj.toString());
				}
			} else {
				obj.put("cod", 100);
				out.write(obj.toString());
			}
			break;

		// CONFIRMA REUNIAO
		case 15:
			ob = new JSONObject(valores);
			System.out.println(ob.toString());
			if (ob.has("id")) {
				try {
					agd = agdDAO.read(ob.getInt("id"));
					agd.setAgendado(true);

					if (agdDAO.update(agd)) {
						obj.put("cod", 101);
						
						agd = agdDAO.read(ob.getInt("id"));
						ce.setCnpjOrigem(agd.getCnpjDest());
						ce.setCnpjDest(agd.getCnpjOrigem());
						
						String empresa = empDAO.read(ce.getCnpjOrigem()).getNomeEmpresa();
						ce.setMensagem("A empresa "+empresa+" confirmou sua presença no evento "+agd.getTitulo());
						ce.setDestino(false);

						ConnectionSocket cs = new ConnectionSocket();
						Session s = cs.socket();
						JSONObject js = new JSONObject();
						js.put("action", "caixa_entrada");
						js.put("title", "AGENDA");
						js.put("href", "agenda.jsp");
						js.put("message",ce.getMensagem());
						js.put("cnpj_origem", agd.getCnpjOrigem());
						js.put("userFrom", agd.getCnpjDest());
						s.getBasicRemote().sendText(js.toString());
						
						
						ceDAO.create(ce);
					} else {
						obj.put("cod", 102);
					}

				} catch (SQLException e) {
					
					obj.put("cod", 103);
				}
			} else {
				obj.put("cod", 100);
			}
			out.write(obj.toString());
			break;

		// DELETA COMPROMISSO
		case 16:
			ob = new JSONObject(valores);
			System.out.println(ob.toString());
			if (ob.has("id") && ob.has("cnpj") ) {
				try {
					agd = agdDAO.read(ob.getInt("id"));
					
					if (agdDAO.delete(ob.getInt("id"))) {
						
						obj.put("cod", 101);
						
						String empresa = empDAO.read(ob.getString("cnpj")).getNomeEmpresa();
						
						if(agd.getCnpjOrigem().equals(ob.getString("cnpj")) && agd.getAgendado()) {
							ce.setCnpjOrigem(agd.getCnpjOrigem());
							ce.setCnpjDest(agd.getCnpjDest());
							ce.setMensagem("A empresa "+empresa+" cancelou o evento: "+agd.getTitulo()+".");
							ce.setDestino(false);
							ceDAO.create(ce);
						} else if(!agd.getCnpjOrigem().equals(ob.getString("cnpj")) && !agd.getAgendado()) {
							ce.setCnpjOrigem(agd.getCnpjDest());
							ce.setCnpjDest(agd.getCnpjOrigem());
							ce.setMensagem("A empresa "+empresa+" recusou o evento: "+agd.getTitulo()+".");
							ce.setDestino(false);
							ceDAO.create(ce);
						} else if(!agd.getCnpjOrigem().equals(ob.getString("cnpj"))) {
							ce.setCnpjOrigem(agd.getCnpjDest());
							ce.setCnpjDest(agd.getCnpjOrigem());
							ce.setMensagem("A empresa "+empresa+" não poderá mais comparecer ao evento: "+agd.getTitulo()+".");
							ce.setDestino(false);
							ceDAO.create(ce);
						}

						Session s = cs.socket();
						JSONObject js = new JSONObject();
						js.put("action", "caixa_entrada");
						js.put("title", "AGENDA");
						js.put("userFrom", ce.getCnpjDest());
						js.put("href", "caixaentrada.jsp");
						js.put("message",ce.getMensagem());
						s.getBasicRemote().sendText(js.toString());
						
					} else {
						obj.put("cod", 102);
					}
				} catch (SQLException e) {
					obj.put("cod", 103);
				}
			} else {
				obj.put("cod", 100);
			}
			out.write(obj.toString());
			break;

		// UPDATE COMPROMISSO
		case 17:
			ob = new JSONObject(valores);

			if (ob.has("titulo") && ob.has("descricao") && ob.has("data") && ob.has("horario")&& ob.has("id") && ob.has("agendado")) {
				agd.setTitulo(ob.getString("titulo"));
				agd.setDescricao(ob.getString("descricao"));
				agd.setData(ob.getString("data"));
				agd.setHorario(ob.getString("horario"));
				agd.setIdCompromisso(ob.getInt("id"));
				agd.setAgendado(ob.getBoolean("agendado"));

				try {
					if (agdDAO.update(agd)) {
						obj.put("cod", 101);
						
						agd = agdDAO.read(ob.getInt("id"));
						
						if(agd.getCnpjOrigem().equals(ob.getString("cnpj")) && agd.getAgendado()) {
							String empresa = empDAO.read(agd.getCnpjOrigem()).getNomeEmpresa();
							ce.setCnpjOrigem(agd.getCnpjOrigem());
							ce.setCnpjDest(agd.getCnpjDest());
							ce.setMensagem("A empresa "+empresa+" mudou: "+agd.getTitulo()+".");
							ce.setDestino(false);
							ceDAO.create(ce);
						} else if(!agd.getCnpjOrigem().equals(ob.getString("cnpj"))) {
							String empresa = empDAO.read(agd.getCnpjDest()).getNomeEmpresa();
							ce.setCnpjOrigem(agd.getCnpjDest());
							ce.setCnpjDest(agd.getCnpjOrigem());
							ce.setMensagem("A empresa "+empresa+" recusou o evento: "+agd.getTitulo()+".");
							ce.setDestino(false);
							ceDAO.create(ce);
						}

						Session s = cs.socket();
						JSONObject js = new JSONObject();
						js.put("action", "caixa_entrada");
						js.put("title", "AGENDA");
						js.put("userFrom", ce.getCnpjDest());
						js.put("href", "caixaentrada.jsp");
						js.put("message",ce.getMensagem());
						s.getBasicRemote().sendText(js.toString());
					} else {
						obj.put("cod", 102);
					}

				} catch (SQLException e) {
					
					obj.put("cod", 103);
				}
			} else {
				obj.put("cod", 100);
			}
			out.write(obj.toString());
			break;

		// CADASTRA PRODUTO
		case 18:
			ob = new JSONObject(valores);

			if (ob.has("cnpj") && ob.has("nome") && ob.has("preco") && ob.has("imagem")) {
				prod.setCnpj(ob.getString("cnpj"));
				prod.setNome(ob.getString("nome"));
				prod.setPreco(ob.getFloat("preco"));
				if (ob.getString("imagem") != null) {
					byte[] decodedBytes = Base64.getDecoder().decode(ob.getString("imagem").replace(" ", "+"));
					InputStream inp = new ByteArrayInputStream(decodedBytes);
					prod.setImagem(inp);
				}
				try {
					if (prodDAO.create(prod)) {
						obj.put("cod", 101); 
					} else {
						obj.put("cod", 102);
					}

				} catch (SQLException e) {
					
					obj.put("cod", 103);
				}
			} else {
				obj.put("cod", 100);
			}
			out.write(obj.toString());
			break;

		// LISTA PRODUTOS
		case 19:
			
			ob = new JSONObject(valores);

			try {
				List<Produtos> lProd = prodDAO.list(ob.getString("cnpj"));
				arr = new JSONArray();
				for (Produtos produtos : lProd) {
					ob = new JSONObject();
					ob.put("id", produtos.getIdProdutos());
					ob.put("nome", produtos.getNome());
					ob.put("preco", produtos.getPreco());
					arr.put(ob);
				}
				out.write(arr.toString());

			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		// CRIA PEDIDO
		case 21:
			ob = new JSONObject(valores);
			if (ob.has("cnpj_origem") && ob.has("cnpj_dest") && ob.has("itens")) {
				arr = ob.getJSONArray("itens");
				ped.setCnpjCliente(ob.getString("cnpj_origem"));
				ped.setCnpjFornecedor(ob.getString("cnpj_dest"));
				try {
					if (pedDAO.create(ped)) {
						List<Item> lItem = new ArrayList<>();
						for (int i = 0; i < arr.length(); i++) {
							JSONObject obj = arr.getJSONObject(i);
							it = new Item();
							it.setIdProdutos(obj.getInt("id_prod"));
							it.setQnt(obj.getInt("qnt"));
							lItem.add(it);
						}

						if (itDAO.create(lItem)) {
							obj.put("cod", 101);
							
							String empresa = empDAO.read(ob.getString("cnpj_origem")).getNomeEmpresa();
							
							ce.setCnpjOrigem(ob.getString("cnpj_origem"));
							ce.setCnpjDest(ob.getString("cnpj_dest"));
							ce.setMensagem("A empresa "+empresa+" realizou um novo pedido.");
							ce.setDestino(false);
							ceDAO.create(ce);

							Session s = cs.socket();
							JSONObject js = new JSONObject();
							js.put("action", "caixa_entrada");
							js.put("title", "PEDIDOS");
							js.put("userFrom", ob.getString("cnpj_dest"));
							js.put("href", "caixaentrada.jsp");
							js.put("message",ce.getMensagem());
							s.getBasicRemote().sendText(js.toString());
						} else {
							obj.put("cod", 104);
						}
					} else {
						obj.put("cod", 102);
					}

				} catch (SQLException e) {
					
					obj.put("cod", 103);
				}

			} else {
				obj.put("cod", 100);
			}
			out.write(obj.toString());
			break;

		// CANCELA PEDIDO
		case 22:
			ob = new JSONObject(valores);
			if (ob.has("id")) {
				try {
					ped = pedDAO.read(ob.getInt("id"));
					
					if (pedDAO.delete(ob.getInt("id"))) {
						obj.put("cod", 101);
						String empresa = empDAO.read(ped.getCnpjCliente()).getNomeEmpresa();
						
						ce.setCnpjOrigem(ped.getCnpjCliente());
						ce.setCnpjDest(ped.getCnpjFornecedor());
						ce.setMensagem("A empresa "+empresa+" cancelou o pedido nº"+ob.getInt("id")+".");
						ce.setDestino(false);
						ceDAO.create(ce);

						Session s = cs.socket();
						JSONObject js = new JSONObject();
						js.put("action", "caixa_entrada");
						js.put("title", "PEDIDO");
						js.put("userFrom", ce.getCnpjDest());
						js.put("href", "caixaentrada.jsp");
						js.put("message",ce.getMensagem());
						s.getBasicRemote().sendText(js.toString());
					} else {
						obj.put("cod", 102);
					}
				} catch (SQLException e) {
					obj.put("cod", 103);
				}
			} else {
				obj.put("cod", 100);
			}
			out.write(obj.toString());
			break;

		// LISTA CONVERSAS
		case 23:
			ob = new JSONObject(valores);
			if (ob.has("cnpj")) {
				try {
					arr = new JSONArray();
					List<Mensagem> lConversas = msgDAO.list(ob.getString("cnpj"));
					for (Mensagem mensagem : lConversas) {
						Mensagem msg = msgDAO.read(mensagem.getCnpjDest(), ob.getString("cnpj"));
						emp = empDAO.read(mensagem.getCnpjDest());
						
						obj = new JSONObject();
						obj.put("empresa", emp.getNomeEmpresa());
						obj.put("cnpj_conversa", mensagem.getCnpjDest());
						obj.put("cnpj", msg.getCnpjOrigem());
						obj.put("mensagem", msg.getMensagem());
						obj.put("data", msg.getDataPostagem());
						obj.put("horario", msg.parseTime(msg.getHorarioPostagem()));
						obj.put("status", msg.getStatus());

						int qnt = msgDAO.readQntFalse(ob.getString("cnpj"), mensagem.getCnpjDest()).size();
						obj.put("number_message", qnt);
						arr.put(obj);
					}
					out.print(arr.toString());
				} catch (SQLException e) {
					System.out.println(e);
					obj.put("cod", 103);
				}

			} else {
				obj.put("cod", 100);
			}
			out.write(obj.toString());
			break;

		// LISTA PEDIDOS RECEBIDOS
		case 24:
			ob = new JSONObject(valores);
			if (ob.has("cnpj")) {
				try {
					arr = new JSONArray();
					List<Pedidos> lPedidos = pedDAO.listPedidosRecebidos(ob.getString("cnpj"));

					for (Pedidos pedidos : lPedidos) {
						List<Item> lIt = itDAO.list(pedidos.getIdPedidos());
						ob = new JSONObject();
						JSONArray array = new JSONArray();
						for (Item itens : lIt) {
							obj = new JSONObject();
							prod = prodDAO.read(itens.getIdProdutos());
							obj.put("produto", prod.getNome());
							obj.put("id_prod", prod.getIdProdutos());
							obj.put("qnt", itens.getQnt());
							obj.put("valor", itens.getValor());
							array.put(obj);
						}
						ob.put("itens", array);

						emp = empDAO.read(pedidos.getCnpjFornecedor());
						ob.put("fornecedor", emp.getNomeEmpresa());

						emp = empDAO.read(pedidos.getCnpjCliente());
						ob.put("cliente", emp.getNomeEmpresa());

						ob.put("endereco", emp.getEndereco());
						ob.put("data_pedido", pedidos.getDataPedido());
						ob.put("data_previsao", pedidos.getDataPrevisao());
						ob.put("data_final", pedidos.getDataFinal());
						ob.put("status", pedidos.getStatus());
						ob.put("id", pedidos.getIdPedidos());
						arr.put(ob);
					}
					out.write(arr.toString());
					
					System.out.println("24: "+arr.toString());
				} catch (SQLException e) {
					System.out.println(e);
					obj.put("cod", 103);
				}

			} else {
				obj.put("cod", 100);
			}
			break;
		// LISTA PEDIDOS FEITOS
		case 25:
			ob = new JSONObject(valores);
			if (ob.has("cnpj")) {
				try {
					arr = new JSONArray();
					
					List<Pedidos> lPedidos = pedDAO.listMeusPedidos(ob.getString("cnpj"));
					
					for (Pedidos pedidos : lPedidos) {
						List<Item> lIt = itDAO.list(pedidos.getIdPedidos());
						JSONObject objt = new JSONObject();
						
						JSONArray array = new JSONArray();
						
						for (Item itens : lIt) {
							obj = new JSONObject();
							prod = prodDAO.read(itens.getIdProdutos());
							obj.put("produto", prod.getNome());
							obj.put("id_prod", prod.getIdProdutos());
							obj.put("qnt", itens.getQnt());
							obj.put("valor", itens.getValor());
							array.put(obj);
						}
						objt.put("itens", array);
						
						emp = empDAO.read(pedidos.getCnpjCliente());
						objt.put("cliente", emp.getNomeEmpresa());
						
						emp = empDAO.read(pedidos.getCnpjFornecedor());
						objt.put("fornecedor", emp.getNomeEmpresa());
						
						objt.put("endereco", emp.getEndereco());
						objt.put("data_pedido", pedidos.getDataPedido());
						objt.put("data_previsao", pedidos.getDataPrevisao());
						objt.put("data_final", pedidos.getDataFinal());
						objt.put("status", pedidos.getStatus());
						objt.put("id", pedidos.getIdPedidos());

						arr.put(objt);
					}

					System.out.println("25: "+arr.toString());
					out.print(arr.toString());
				} catch (SQLException e) {
					System.out.println(e);
					obj.put("cod", 103);
				}

			} else {
				obj.put("cod", 100);
			}
			out.write(obj.toString());
			break;
			
		// LISTA CAIXA DE ENTRADA
		case 26:
			ob = new JSONObject(valores);
			if (ob.has("cnpj")) {
				try {
					arr = new JSONArray();
					List<CaixaEntrada> lCaixaEntrada = ceDAO.list(ob.getString("cnpj"));
					for (CaixaEntrada caixaentrada : lCaixaEntrada) {
						if(!caixaentrada.getStatus()) {
							ceDAO.update(caixaentrada.getIdCaixaEntrada());
						}
						obj = new JSONObject();
						obj.put("id", caixaentrada.getIdCaixaEntrada());
						obj.put("mensagem", caixaentrada.getMensagem());
						obj.put("data", caixaentrada.getData());
						obj.put("horario", caixaentrada.getHorario());
						arr.put(obj);
					}
					out.print(arr.toString());
				} catch (SQLException e) {
					System.out.println(e);
					obj.put("cod", 103);
				}

			} else {
				obj.put("cod", 100);
			}
			out.write(obj.toString());
			break;
			
		// UPDATE PEDIDO
		case 27:
			ob = new JSONObject(valores);
			if (ob.has("id")) {
				try {
					ped.setIdPedidos(ob.getInt("id"));
					
					Pedidos pedidos = pedDAO.read(ob.getInt("id"));
					
					if(ob.getInt("status") == 4) {
						Calendar c = Calendar.getInstance();
						Date data = c.getTime();
				        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
						ped.setDataFinal(sdf.format(data));
						ped.setDataPrevisao(pedidos.getDataPrevisao());
					} else if(ob.getInt("status") == 1){
						String empresa = empDAO.read(pedidos.getCnpjFornecedor()).getNomeEmpresa();
					
						ce.setCnpjOrigem(ped.getCnpjCliente());
						ce.setCnpjDest(ped.getCnpjFornecedor());
						ce.setMensagem("A empresa "+empresa+" definiu uma data de entrega para o pedido nº "+ob.getInt("id")+".");
						ce.setDestino(false);
						ceDAO.create(ce);

						Session s = cs.socket();
						JSONObject js = new JSONObject();
						js.put("action", "caixa_entrada");
						js.put("title", "PEDIDO");
						js.put("userFrom", ce.getCnpjDest());
						js.put("href", "caixaentrada.jsp");
						js.put("message",ce.getMensagem());
						s.getBasicRemote().sendText(js.toString());
						
						ped.setDataPrevisao(ob.getString("data_prev"));
					} else {
						ped.setDataFinal(null);
						ped.setDataPrevisao(pedidos.getDataPrevisao());
					}
					
					ped.setStatus(ob.getInt("status"));
					if(pedDAO.update(ped)) {
						obj.put("cod", 101);
					} else {
						obj.put("cod", 102);
					}
					out.print(obj.toString());
				} catch (SQLException e) {
					System.out.println(e);
					obj.put("cod", 103);
				}

			} else {
				obj.put("cod", 100);
			}
			out.write(obj.toString());
			break;
			// UPDATE MENSAGEM
			case 28:
				ob = new JSONObject(valores);
				if (ob.has("cnpj_dest") || ob.has("cnpj_origem")) {
					try {
						List<Mensagem> nLidas =  msgDAO.readQntFalse(ob.getString("cnpj_origem"),ob.getString("cnpj_dest"));
						for (Mensagem mensagem : nLidas) {
							if(msgDAO.update(mensagem.getIdMensagem())) {
								obj.put("cod", 101);
							} else {
								obj.put("cod", 102);
							}
						}
					} catch (SQLException e) {
						System.out.println(e);
						obj.put("cod", 103);
					}

				} else {
					obj.put("cod", 100);
				}
				out.write(obj.toString());
				break;

			// UPDATE CAIXA ENTRADA
			case 29:
				ob = new JSONObject(valores);
				if (ob.has("id")) {
					try {
						if(ceDAO.update(ob.getInt("id"))) {
							obj.put("cod", 101);
						} else {
							obj.put("cod", 102);
						}
					} catch (SQLException e) {
						System.out.println(e);
						obj.put("cod", 103);
					}
	
				} else {
					obj.put("cod", 100);
				}
				out.write(obj.toString());
				break;
			// VERIFICA SE HÁ ALGUMA MENSAGEM NÃO LIDA
			case 30:
				ob = new JSONObject(valores);
				if (ob.has("cnpj")) {
					try {
						obj.put("verify", msgDAO.readMsg(ob.getString("cnpj")));
					} catch (SQLException e) {
						System.out.println(e);
						obj.put("cod", 103);
					}
	
				} else {
					obj.put("cod", 100);
				}
				out.write(obj.toString());
				break;
			// VERIFICA SE HÁ ALGUMA MENSAGEM NA CAIXA DE ENTRADA NÃO LIDA
			case 31:
				ob = new JSONObject(valores);
				if (ob.has("cnpj")) {
					try {
						obj.put("verify", ceDAO.read(ob.getString("cnpj")));
					} catch (SQLException e) {
						System.out.println(e);
						obj.put("cod", 103);
					}
	
				} else {
					obj.put("cod", 100);
				}
				out.write(obj.toString());
				break;
		// LOGIN
		case 20:
			ob = new JSONObject(valores);

			if (ob.has("cnpj") && ob.has("senha")) {
				emp.setCnpj(ob.getString("cnpj"));
				emp.setSenha(ob.getString("senha"));

				try {
					if (empDAO.login(emp.getCnpj(), emp.getSenha())) {
						obj.put("cnpj", emp.getCnpj());
						out.write(obj.toString());
						System.out.println(obj.toString());
					} else {
						obj.put("cod", 300);
						out.write(obj.toString());
					}
				} catch (SQLException e) {
					System.out.println(e);
					obj.put("cod", 103);
					out.write(obj.toString());
				}
			} else {
				obj.put("cod", 100);
				out.write(obj.toString());
			}

			System.out.println(obj.toString());
			break;
		default:
			out.write("cod");
			break;
		}

	}

	// CARREGA IMAGENS
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		int acao = Integer.parseInt(req.getParameter("acao"));
		
		BufferedImage buffer;
		switch (acao) {
		// CARREGA FOTO EMPRESA
		case 1:
			String cnpj = req.getParameter("cnpj");
			emp = new Empresa();
			empDAO = new EmpresasDAO();
			emp.setCnpj(cnpj);
			try {
				Empresa empresa = empDAO.read(emp.getCnpj());
				
				if (empresa.getFotoPerfil() != null) {
					buffer = ImageIO.read(empresa.getFotoPerfil());
				} else {
					buffer = ImageIO.read(new File(req.getServletContext().getRealPath("img") + File.separator + "industria.jpg"));
				}
				ByteArrayOutputStream b = new ByteArrayOutputStream();
				ImageIO.write(buffer, "jpg", b);

				byte[] imgArray = b.toByteArray();
				ServletOutputStream sos = resp.getOutputStream();
				sos.write(imgArray);
			} catch (SQLException e) {
				
				obj.put("cod", 103);
			}
			break;
		// CARREGA FOTO PRODUTO
		case 2:
			int cod = Integer.parseInt(req.getParameter("codigo"));
			prod = new Produtos();
			prodDAO = new ProdutosDAO();
			prod.setIdProdutos(cod);
			try {
				Produtos produtos = prodDAO.read(prod.getIdProdutos());

				if (produtos.getImagem() != null) {
					buffer = ImageIO.read(produtos.getImagem());
				} else {
					buffer = ImageIO.read(new File(req.getServletContext().getRealPath("img") + File.separator + "produtos.jpg"));
				}
				ByteArrayOutputStream b = new ByteArrayOutputStream();
				ImageIO.write(buffer, "jpg", b);

				byte[] imgArray = b.toByteArray();
				ServletOutputStream sos = resp.getOutputStream();
				sos.write(imgArray);
			} catch (SQLException e) {
				obj.put("cod", 103);
			}
			break;

		default:
			break;
		}
	}
	
}